{"version":3,"sources":["app/view/component/login-form/index.tsx","app/store/auth/constants.ts","app/HttpClientProvider.tsx","app/store/auth/selectors.ts","app/HttpClientContext.tsx","app/view/screen/login/index.tsx","app/store/auth/actions.ts","app/view/screen/dashboard/index.tsx","app/routing/PrivateRoute.tsx","app/routing/index.tsx","app/store/auth/reducer.ts","app/App.tsx","app/store/store.factory.ts","app/store/root.reducer.ts","serviceWorker.ts","index.tsx"],"names":["LoginForm","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","login","password","onSubmit","e","preventDefault","data","objectSpread","props","inherits","createClass","key","value","_this2","react_default","a","createElement","Form","Group","controlId","Label","Control","required","type","placeholder","onChange","setState","target","Text","className","Button","variant","React","Component","LOGIN","LOGOUT","BaseComponent","selectAuth","get","makeSelectIsLogged","createSelector","is_logged","HttpClientContext","client","HttpClientProvider","axios","create","baseURL","interceptors","response","use","error","Provider","children","LoginClass","_callee","resp","regenerator_default","wrap","_context","prev","next","post","sent","status","stop","console","log","react_router","to","Container","Card","Body","login_form_LoginForm","mapStateToProps","Login","connect","dispatch","Consumer","assign","Dashboard","PrivateRouteClass","_this$props","component","rest","objectWithoutProperties","react","render","PrivateRoute","sss","createBrowserHistory","AppRouter","history","path","exact","initialState","authReducer","undefined","store","createStore","injectedReducers","combineReducers","auth","createReducer","fromJS","configureStore","App","es","HttpClientProvider_HttpClientProvider","routing_AppRouter","Boolean","window","location","hostname","match","ReactDOM","app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cb59ac46.chunk.js","sourcesContent":["import React, {FormEvent, ReactNode} from 'react';\nimport {Form, Button} from 'react-bootstrap'\nimport {AuthDataD} from \"app/model/authData\";\n\n\ninterface Props {\n    onSubmit: { (data: AuthDataD): void }\n}\n\ninterface State {\n    login: string | null,\n    password?: string | null\n}\n\nexport class LoginForm extends React.Component<Props, State> {\n    state = {\n        login: '',\n        password: '',\n    };\n\n    onSubmit = (e: FormEvent): void => {\n        e.preventDefault();\n\n        const data: AuthDataD = {\n            ...this.state\n        };\n\n        this.props.onSubmit(data);\n    };\n\n    render(): ReactNode {\n        return (\n            <Form onSubmit={this.onSubmit}>\n                <Form.Group controlId=\"formBasicEmail\">\n                    <Form.Label>Login</Form.Label>\n                    <Form.Control\n                        required\n                        type=\"text\"\n                        placeholder=\"Enter login\"\n                        onChange={(e: any) => this.setState({login: e.target.value})}\n                    />\n                    <Form.Text className=\"text-muted\">\n                        We'll never share your email with anyone else.\n                    </Form.Text>\n                </Form.Group>\n\n                <Form.Group controlId=\"formBasicPassword\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control\n                        required\n                        type=\"password\"\n                        placeholder=\"Password\"\n                        onChange={(e: any) => this.setState({password: e.target.value})}\n                    />\n                </Form.Group>\n                <Button variant=\"primary\" type=\"submit\">\n                    Submit\n                </Button>\n            </Form>\n        );\n    }\n}\n","export const LOGIN = 'app/auth/login';\nexport const LOGOUT = 'app/auth/logout';\nexport const DEFAULT_IS_LOGGED = false;","import React from 'react';\nimport {Store} from 'redux';\nimport axios, {AxiosInstance} from 'axios';\nimport {HttpClientContext} from './HttpClientContext'\nimport {logout} from 'app/store/auth/actions'\n\ninterface Props {\n    store: any\n}\n\ninterface State {\n    client: AxiosInstance | null\n}\n\nexport class HttpClientProvider extends React.Component<Props, State> {\n    state = {\n        client: null\n    };\n\n    componentDidMount(): void {\n        const client = axios.create({\n            baseURL: 'http://localhost'\n        });\n\n        client.interceptors.response.use(function (response) {\n            return response;\n        }, function (error) {\n            // this.props.store.dispatch(logout())\n        });\n\n        this.setState({\n            client\n        })\n    }\n\n    render() {\n        return (\n            <HttpClientContext.Provider value={{client: this.state.client}}>\n                {this.props.children}\n            </HttpClientContext.Provider>\n        )\n    }\n}\n\nexport const withClient = (BaseComponent: any) => (props: any) => (\n    <HttpClientContext.Consumer>\n        {(data) => <BaseComponent {...props} {...data} />}\n    </HttpClientContext.Consumer>\n);","import {createSelector} from 'reselect';\n\nconst selectAuth = (state: any) => state.get('auth');\nconst makeSelectIsLogged = () => createSelector(selectAuth, state => state.is_logged);\n\nexport {makeSelectIsLogged}","import * as React from 'react';\nimport {AxiosInstance} from \"axios\";\n\ninterface DefaultValue {\n    client: AxiosInstance | null\n}\n\nconst defaultValue: DefaultValue = {\n    client: null\n};\n\nexport const HttpClientContext = React.createContext(defaultValue)","import React from 'react';\nimport {Container, Card} from \"react-bootstrap\";\nimport {LoginForm} from \"app/view/component/login-form\";\nimport {AuthDataD} from \"app/model/authData\";\nimport {login} from \"app/store/auth/actions\";\nimport {connect} from 'react-redux';\nimport {createSelector} from \"reselect\";\nimport {makeSelectIsLogged} from \"../../../store/auth/selectors\";\nimport {Redirect} from \"react-router\";\nimport {withClient} from \"app/HttpClientProvider\";\nimport {AxiosInstance} from \"axios\";\n\ninterface Props {\n    is_logged: boolean\n    login: () => void,\n    client: AxiosInstance\n}\n\nclass LoginClass extends React.Component<Props> {\n    onSubmit = async (data: AuthDataD) => {\n        const resp = await this.props.client.post('/login/email', data);\n\n        if (resp && resp.data && resp.data.status) {\n            this.props.login();\n        }\n    };\n\n    render() {\n        console.log( this.props);\n        if (this.props.is_logged) {\n            return <Redirect to=\"/\" />\n        }\n\n        return (\n            <Container>\n                <Card className=\"mt-5\">\n                    <Card.Body>\n                        <LoginForm onSubmit={this.onSubmit} />\n                    </Card.Body>\n                </Card>\n            </Container>\n        )\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => ({\n    login: () => {\n        return dispatch(login());\n    },\n    dispatch,\n});\n\nconst mapStateToProps = createSelector(makeSelectIsLogged(), (is_logged: boolean) => ({\n    is_logged,\n}));\n\nexport const Login = withClient(connect(mapStateToProps, mapDispatchToProps)(LoginClass));\n","import {LOGIN, LOGOUT} from './constants';\n\nexport function login() {\n    return {\n        type: LOGIN,\n    };\n}\n\nexport function logout() {\n    return {\n        type: LOGIN,\n    };\n}\n","import React from 'react';\nimport {Container, Card} from \"react-bootstrap\";\n\nexport class Dashboard extends React.Component {\n    render() {\n        return (\n            <Container>\n                <Card className=\"mt-5\">\n                    <Card.Body>\n                        Welcome!\n                    </Card.Body>\n                </Card>\n            </Container>\n        )\n    }\n}\n","import * as React from \"react\";\n\nimport {connect} from 'react-redux';\nimport {makeSelectIsLogged} from 'app/store/auth/selectors';\nimport {createSelector} from 'reselect';\n\nimport {Route, Redirect, RouteProps} from 'react-router-dom'\n\ninterface Props extends RouteProps{\n    is_logged: boolean\n    component: any\n}\n\nclass PrivateRouteClass extends React.Component<Props> {\n    render() {\n        const {component: Component, is_logged, ...rest} = this.props;\n\n        return (\n            <Route {...rest} render={(props) => (\n                is_logged ? <Component {...props} /> : <Redirect to='/login' />\n            )} />\n        )\n    }\n}\n\nconst mapStateToProps = createSelector(makeSelectIsLogged(), (is_logged: boolean) => ({\n    is_logged,\n}));\n\nexport const PrivateRoute = connect(mapStateToProps)(PrivateRouteClass);","import React from 'react';\nimport {Router, Switch, Route, Redirect} from 'react-router-dom'\nimport {Login} from \"app/view/screen/login\";\nimport {Dashboard} from \"app/view/screen/dashboard\";\nimport {createBrowserHistory} from \"history\"\nimport {PrivateRoute} from './PrivateRoute'\n\nconst sss = createBrowserHistory();\n\nexport class AppRouter extends React.Component {\n    render() {\n        return (\n            <Router history={sss}>\n                <Switch>\n                    <Route path=\"/\" render={() => <Redirect to=\"/dashboard\" />} exact />\n                    <Route\n                        path=\"/login\"\n                        component={Login}\n                        exact\n                    />\n                    <PrivateRoute path=\"/dashboard\" component={Dashboard} />\n                </Switch>\n            </Router>\n        )\n    }\n}\n","import {LOGOUT, LOGIN, DEFAULT_IS_LOGGED} from './constants'\n\ninterface State {\n    is_logged: boolean\n}\n\nconst initialState: State = {\n    is_logged: DEFAULT_IS_LOGGED\n};\n\nexport function authReducer(state = initialState, action: any) {\n    switch (action.type) {\n        case LOGIN:\n            return {\n                is_logged: true,\n            };\n        case LOGOUT:\n            return {\n                is_logged: false\n            };\n        default:\n            return state;\n    }\n}","import React, {Component} from 'react';\nimport './assets/css/App.css';\nimport {Container} from \"react-bootstrap\";\nimport {AppRouter} from \"./routing\";\nimport {configureStore} from 'app/store/store.factory'\nimport {Provider} from 'react-redux';\nimport {HttpClientProvider} from \"./HttpClientProvider\";\n\nconst store = configureStore();\n\nclass App extends Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <HttpClientProvider store={store}>\n                    <Container className=\"App\">\n                        <AppRouter />\n                    </Container>\n                </HttpClientProvider>\n            </Provider>\n        );\n    }\n}\n\nexport default App;","import {createStore, Store} from 'redux';\nimport {fromJS} from 'immutable';\nimport {createReducer} from './root.reducer';\n\nexport function configureStore(initialState = {}): Store {\n    return createStore(\n        createReducer(),\n        fromJS(initialState),\n    );\n}\n","import {combineReducers} from 'redux-immutable';\nimport {authReducer} from './auth/reducer';\n\nexport function createReducer(injectedReducers = {}) {\n    return combineReducers({\n        auth: authReducer,\n        ...injectedReducers\n    })\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}